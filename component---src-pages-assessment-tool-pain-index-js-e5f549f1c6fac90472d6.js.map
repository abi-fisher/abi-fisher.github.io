{"version":3,"sources":["webpack:///./src/pages/AssessmentTool/Pain/index.js","webpack:///./src/pages/AssessmentTool/Pain/painHistory.js","webpack:///./src/pages/AssessmentTool/Pain/painAdvise.js","webpack:///./src/pages/AssessmentTool/Pain/painScore.js","webpack:///./src/pages/AssessmentTool/Pain/painAnalgesia.js"],"names":["Pain","props","model","painScoreDone","painHistoryDone","painAnalgesiaDone","painAdviseDone","selected","PainHistory","state","question","answer","identified","handleAnswer","this","setState","handleSubmit","updateModels","name","value","onUpdateMany","render","style","textAlign","marginTop","className","onClick","React","Component","PainAdvise","PainScore","unselected","handleUpdate","onUpdate","marginBottom","painScore","undefined","PainAnalgesia"],"mappings":"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","file":"component---src-pages-assessment-tool-pain-index-js-e5f549f1c6fac90472d6.js","sourcesContent":["import React from \"react\"\nimport PainScore from \"./painScore\";\nimport PainHistory from \"./painHistory\";\nimport PainAnalgesia from \"./painAnalgesia\";\nimport PainAdvise from \"./painAdvise\";\n\nexport function Pain(props){\n\n  const model = props.model ? props.model : {};\n\n  return(   \n    !model.painScoreDone ? <PainScore {...props} />\n      : !model.painHistoryDone ? <PainHistory {...props}/>\n        : !model.painAnalgesiaDone ? <PainAnalgesia {...props}/>\n          : !model.painAdviseDone ? <PainAdvise {...props}/>\n            :<p>there are no further questions for this section.</p>    \n  );\n}\n\nexport default Pain\n","import React from \"react\"\n\nconst unselected = \"btn btn-primary\";\nconst selected = \"btn btn-primary btn-selected\";\n\nexport class PainHistory extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state={\n        question: \"painHistory\",\n        answer: null,\n        identified:null,\n    };\n  }\n\n  handleAnswer(answer){\n    this.setState({\n      answer: answer,\n      identified: answer,\n    })\n  }\n\n  handleSubmit(){\n    \n    var questionModel = {name: this.state.question, value: this.state.answer};\n    var doneModel = {name:\"painHistoryDone\", value:true};\n\n    var updateModels = [questionModel, doneModel];\n\n    this.props.onUpdateMany(updateModels, this.state.identified);\n  }\n\n\n  render(){\n\n    return(\n\n      <div style={{textAlign: 'center', marginTop: '3em'}}>\n        <h3>Is there a history of confusion/hallucinations with opiates?</h3>     \n        <p>       \n          <button \n            className={this.state.answer === true ? selected : unselected}\n            onClick={()=>this.handleAnswer(true)} >\n              Yes\n          </button>\n          <button className={this.state.answer === false ? selected : unselected}\n          onClick={()=>this.handleAnswer(false)}>\n            No\n            </button>\n        </p>\n       \n        <p style={{marginTop: '4em'}}>\n          { this.state.answer !== null ? <button\n         className={unselected}\n         onClick={()=>this.handleSubmit()}\n        >Next</button> : <></> }</p>\n      </div>\n  );\n  }\n\n}\n\nexport default PainHistory\n","import React from \"react\"\n\nconst unselected = \"btn btn-primary\";\nconst selected = \"btn btn-primary btn-selected\";\n\nexport class PainAdvise extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state={\n        question: \"painAdvise\",\n        answer: null,\n        identified:null,\n    };\n  }\n\n  handleAnswer(answer){\n    this.setState({\n      answer: answer,\n      identified: answer,\n    })\n  }\n\n  handleSubmit(){\n    \n    var questionModel = {name: this.state.question, value: this.state.answer};\n    var doneModel = {name:\"painAdviseDone\", value:true};\n\n    var updateModels = [questionModel, doneModel];\n\n    this.props.onUpdateMany(updateModels, this.state.identified, true);\n  }\n\n\n  render(){\n\n    return(\n\n      <div style={{textAlign: 'center', marginTop: '3em'}}>\n        <h3>Is the patientâ€™s pain uncontrolled or advice is required?</h3>     \n        <p>       \n          <button \n            className={this.state.answer === true ? selected : unselected}\n            onClick={()=>this.handleAnswer(true)} >\n              Yes\n          </button>\n          <button className={this.state.answer === false ? selected : unselected}\n          onClick={()=>this.handleAnswer(false)}>\n            No\n            </button>\n        </p>\n       \n        <p style={{marginTop: '4em'}}>\n          { this.state.answer !== null ? <button\n         className={unselected}\n         onClick={()=>this.handleSubmit()}\n        >Next</button> : <></> }</p>\n      </div>\n  );\n  }\n\n}\n\nexport default PainAdvise\n","import React from \"react\"\n\nexport function PainScore(props){\n\n  const model = props.model ? props.model : {};\n  const unselected = \"btn btn-primary\";\n  const selected = \"btn btn-primary btn-selected\";\n\n  const handleUpdate = (name, value, identified) => {\n      props.onUpdate({name,value}, identified);\n  }\n\n  return(\n\n      <div style={{textAlign: 'center', marginTop: '3em'}}>\n        <p style={{marginBottom: '.5em'}}>what is the patient's</p>\n        <h3>Average Abbey Pain Scale Score</h3>     \n        <p>\n          <button \n            className={model.painScore === 0 ? selected : unselected}\n            onClick={()=>handleUpdate(\"painScore\", 0)} >\n              None\n          </button>\n          <button className={model.painScore === 1 ? selected : unselected}\n          onClick={()=>handleUpdate(\"painScore\", 1)}>\n            Mild\n            </button>\n        </p>\n        <p>\n          <button className={model.painScore === 2 ? selected : unselected}\n          onClick={()=>handleUpdate(\"painScore\", 2, true)}>\n            Moderate\n          </button>\n          <button className={model.painScore === 3 ? selected : unselected}\n          onClick={()=>handleUpdate(\"painScore\", 3, true)}\n          >\n            Severe\n          </button>\n        </p>\n        <p style={{marginTop: '6em'}}>\n          { model.painScore !== undefined ? <button\n         className={unselected}\n         onClick={()=>handleUpdate(\"painScoreDone\", true)}\n        >Next</button> : <></> }</p>\n      </div>\n  );\n}\n\n\nexport default PainScore\n","import React from \"react\"\n\nconst unselected = \"btn btn-primary\";\nconst selected = \"btn btn-primary btn-selected\";\n\nexport class PainAnalgesia extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state={\n        question: \"painAnalgesia\",\n        answer: null,\n        identified:null,\n    };\n  }\n\n  handleAnswer(answer){\n    this.setState({\n      answer: answer,\n    })\n  }\n\n  handleSubmit(){\n    \n    var questionModel = {name: this.state.question, value: this.state.answer};\n    var doneModel = {name:\"painAnalgesiaDone\", value:true};\n\n    var updateModels = [questionModel, doneModel];\n\n    this.props.onUpdateMany(updateModels, this.state.identified);\n  }\n\n\n  render(){\n\n    return(\n\n      <div style={{textAlign: 'center', marginTop: '3em'}}>\n        <h3>Are we using PRN analgesia when required?</h3>     \n        <p>       \n          <button \n            className={this.state.answer === true ? selected : unselected}\n            onClick={()=>this.handleAnswer(true)} >\n              Yes\n          </button>\n          <button className={this.state.answer === false ? selected : unselected}\n          onClick={()=>this.handleAnswer(false)}>\n            No\n            </button>\n        </p>\n       \n        <p style={{marginTop: '4em'}}>\n          { this.state.answer !== null ? <button\n         className={unselected}\n         onClick={()=>this.handleSubmit()}\n        >Next</button> : <></> }</p>\n      </div>\n  );\n  }\n\n}\n\nexport default PainAnalgesia\n"],"sourceRoot":""}